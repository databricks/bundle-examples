scalaVersion := "{{template `scala_version` .}}"

name := "{{.project_name}}"
organization := "com.examples"
version := "{{template `version` .}}"

libraryDependencies += "com.databricks" % "databricks-connect" % "{{template `dbr_version` .}}.+"
libraryDependencies += "org.slf4j" % "slf4j-simple" % "2.0.16"

assembly / assemblyOption ~= { _.withIncludeScala(false) }
assembly / assemblyExcludedJars := {
  val cp = (assembly / fullClasspath).value
  cp filter { _.data.getName.matches("scala-.*") } // remove Scala libraries
}

assemblyMergeStrategy := {
  case _ => MergeStrategy.preferProject
}

lazy val fatJar = {{template `jar_path` .}}

lazy val runFatJar = taskKey[Unit]("Runs the assembled JAR locally")

runFatJar := {
  val jar = fatJar
  if (!jar.exists()) {
    println(s"Assembly JAR not found at $jar, creating it...")
    (assembly).value
  }
  println(s"Running assembled JAR: $jar")
  val exitCode = Process(Seq("java", "-jar", jar.getAbsolutePath)).!
  if (exitCode != 0) sys.error(s"Running JAR failed with exit code $exitCode")
}